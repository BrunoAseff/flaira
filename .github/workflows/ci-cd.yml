name: CI/CD Pipeline

on:
  push:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2
        with:
          version: 10.6.3
      - uses: actions/setup-node@v3
        with:
          node-version: 20.19.0
      - run: pnpm install
      - run: pnpm lint

  typecheck:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2
        with:
          version: 10.6.3
      - uses: actions/setup-node@v3
        with:
          node-version: 20.19.0
      - run: pnpm install
      - run: pnpm typecheck

  tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2
        with:
          version: 10.6.3
      - uses: actions/setup-node@v3
        with:
          node-version: 20.19.0
      - run: pnpm install

      - name: Setup environment
        run: |
          echo "Creating .env.development file"
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/flaira?schema=public" > .env.development
          # Add other necessary env variables here

      - name: Start services and backend
        run: |
          # Start PostgreSQL
          pnpm run services:up
          echo "Docker containers status:"
          docker ps
          
          # Start the backend service
          echo "Starting backend service..."
          # Use dotenv to load environment variables from .env.development
          pnpm run dev:backend &
          # Wait for the backend to initialize
          sleep 10
          
          # Check if backend is running
          echo "Checking if backend is running..."
          if curl -s http://localhost:3001/status; then
            echo "Backend is up and running!"
          else
            echo "Backend failed to start"
            exit 1
          fi

      - name: Wait for backend
        run: |
          echo "Waiting for backend to start..."
          max_attempts=12
          attempts=0
          
          while [ $attempts -lt $max_attempts ]; do
            if curl -s http://localhost:3001/status; then
              echo "Backend is up and running!"
              break
            fi
            
            attempts=$((attempts + 1))
            echo "Attempt $attempts/$max_attempts: Backend not ready yet, waiting..."
            
            # Print container logs for debugging
            if [ $attempts -eq 5 ]; then
              echo "Backend still not ready, checking container logs:"
              docker logs postgres_dev
            fi
            
            sleep 10
          done
          
          if [ $attempts -ge $max_attempts ]; then
            echo "Backend did not start within the timeout period." >&2
            docker logs postgres_dev
            exit 1
          fi

      - name: Run tests
        run: VITEST_LOG_LEVEL=verbose pnpm test

  build-and-push:
    needs: [lint, typecheck, tests]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: 10.6.3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.19.0

      - name: Install dependencies
        run: pnpm install

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::692859947277:role/GitHubActionsECRPushRole
          aws-region: us-east-2

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to ECR
        run: |
          IMAGE_TAG=latest
          REPO=692859947277.dkr.ecr.us-east-2.amazonaws.com/flaira
          docker build -t $REPO:$IMAGE_TAG .
          docker push $REPO:$IMAGE_TAG

      - name: Force ECS to redeploy latest image
        run: |
          aws ecs update-service \
            --cluster flaira \
            --service flairaprod \
            --force-new-deployment
